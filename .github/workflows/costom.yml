name: Linux (Custom)

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true

env:
  app_name: 'ninja'
  app_repo: 'ninja-build/ninja'

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get-version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event.inputs.version }}" = "latest" ]; then
            app_version=$(curl -s "https://api.github.com/repos/${{ env.app_repo }}/releases/latest" | jq -r .tag_name)
          else
            app_version=${{ github.event.inputs.version }}
          fi
          if [ -z "${app_version}" ] || [ "${app_version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          
          echo "app_version=${app_version}" >> $GITHUB_ENV
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          echo ""
          echo "========== Build Args =========="
          echo "app_version=${app_version}"

  build:
    runs-on: ${{ matrix.runner }}
    needs: check
    env:
      app_version: ${{ needs.check.outputs.app_version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: x86_64
            runner: ubuntu-24.04
          - arch: arm64
            platform: aarch64
            runner: ubuntu-24.04-arm
          - arch: loong64
            platform: loongarch64
            runner: ubuntu-24.04
          - arch: s390x
            platform: s390x
            runner: ubuntu-24.04
          - arch: ppc64le
            platform: ppc64le
            runner: ubuntu-24.04
    steps:
      - name: Get Version
        run: |
          echo "app_version=${app_version}"

      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build Binaries
        run: |
          BASE_IMAGE='quay.io/almalinuxorg/almalinux:8'
          if [ "${{ matrix.platform }}" = "loongarch64" ]; then
            BASE_IMAGE='ghcr.io/loong64/anolis:23'
          fi
          docker buildx build \
            --platform linux/${{ matrix.arch }} \
            --build-arg BASE_IMAGE=${BASE_IMAGE} \
            --build-arg VERSION=${{ env.app_version }} \
            -t ${{ env.app_name }}-static-${{ matrix.platform }}:${{ env.app_version }} \
            . --load

      - name: Upgrade Release
        run: |
          docker run --rm -v $(pwd)/release-build:/dist ${{ env.app_name }}-static-${{ matrix.platform }}:${{ env.app_version }}
          sudo chown -R $USER:$USER release-build
          ls -al release-build
          mkdir artifact
          7z a artifact/ninja-linux-${{ matrix.platform }}.zip ./release-build/ninja
          if [ "${{ matrix.platform }}" != "${{ matrix.arch }}" ]; then
            cp -f artifact/ninja-linux-${{ matrix.platform }}.zip artifact/ninja-linux-${{ matrix.arch }}.zip
          fi
          gh release upload ${{ env.app_version }} -R ${{ github.repository }} artifact/* --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}