name: Linux

on:
  workflow_dispatch:
    inputs:
      version:
        default: 'latest'
        description: 'Package version'
        type: string
        required: true
  schedule:
    - cron: '0 20 * * *'

env:
  app_name: 'ninja'
  app_repo: 'ninja-build/ninja'

jobs:
  check-binaries:
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.get-version.outputs.app_version }}
      app_build: ${{ steps.check-release.outputs.app_build }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event.inputs.version }}" = "latest" ]; then
            app_version=$(curl -s "https://api.github.com/repos/${{ env.app_repo }}/releases/latest" | jq -r .tag_name)
          else
            app_version=${{ github.event.inputs.version }}
          fi
          if [ -z "${app_version}" ] || [ "${app_version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          
          echo "app_version=${app_version}" >> $GITHUB_ENV
          echo "app_version=${app_version}" >> $GITHUB_OUTPUT
          echo ""
          echo "========== Build Args =========="
          echo "app_version=${app_version}"

      - name: Check Release
        id: check-release
        run: |
          gh release view ${app_version} -R ${{ github.repository }} >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
          gh release view ${app_version} -R ${{ github.repository }} | grep ninja-linux-loongarch64.zip >/dev/null 2>&1 || echo "app_build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        if : steps.check-release.outputs.create == '1'
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add .
          git commit -m "Release ${app_version}" || true
          git tag ${app_version}
          git push origin ${app_version}  || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if : steps.check-release.outputs.create == '1'
        run: |
          gh release create ${app_version} -R ${{ github.repository }} --title ${app_version} --notes "**Full Changelog**: [${app_version}](https://github.com/${{ env.app_repo }}/releases/tag/${app_version})"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-binaries:
    runs-on: ubuntu-latest
    needs: check-binaries
    if: needs.check-binaries.outputs.app_build == '1'
    env:
      app_version: ${{ needs.check-binaries.outputs.app_version }}
    steps:
      - name: Get Version
        run: |
          echo "app_version=${app_version}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ env.app_version }}
      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Build Binaries
        run: |
          docker buildx build --platform linux/loong64 --build-arg VERSION=${{ env.app_version }} -t ${{ env.app_name }}-static-loong64:${{ env.app_version }} . --load

      - name: Upgrade Release
        run: |
          docker run --rm -v $(pwd)/dist:/dist ${{ env.app_name }}-static-loong64:${{ env.app_version }}
          ls -al dist
          7z a dist/ninja-linux-loongarch64.zip dist/ninja
          cd dist
          sha256sum ninja-linux-loongarch64.zip > ninja-linux-loongarch64.zip.sha256
          cd ..
          gh release upload ${{ env.app_version }} -R ${{ github.repository }} dist/ninja-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}